name: deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write

jobs:
  constant:
    runs-on: ubuntu-latest
    outputs:
      aws-region: ${{ steps.constant.outputs.aws-region }}
      aws-ecr-registry: ${{ secrets.AWS_ECR_REGISTRY }}
      docker-image-name: akari-front-repository:${{ github.sha }}
      aws-account-id: ${{ env.aws-account-id }}
      deploy-key: ${{ env.deploy-key }}
      node-version: ${{ steps.constant.outputs.node-version }}
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v3.5.0
      - id: constant
        name: constant
        uses: ningenMe/chiyuki-k8s-config/action/constant@main
      - id: configure-aws-credentials
        name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2.0.0
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          role-session-name: github-actions-role
          aws-region: ${{ steps.constant.outputs.aws-region }}
      - id: aws-config
        name: aws-config
        uses: ningenMe/chiyuki-k8s-config/action/aws-config@main

  build-and-push-image:
    runs-on: ubuntu-latest
    needs: [ constant ]
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v3.5.0
      - id: docker-image-build-yarn
        name: docker-image-build-yarn
        uses: ningenMe/chiyuki-k8s-config/action/docker-image-build-yarn@main
        with:
          aws-ecr-registry: ${{ secrets.AWS_ECR_REGISTRY }} # TODO
          docker-image-name: ${{ needs.constant.outputs.docker-image-name }}
          node-version: ${{ needs.constant.outputs.node-version }}
      - id: docker-image-push
        name: docker-image-push
        uses: ningenMe/chiyuki-k8s-config/action/docker-image-push@main
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ needs.constant.outputs.aws-region }}
          aws-ecr-registry: ${{ secrets.AWS_ECR_REGISTRY }} # TODO
          docker-image-name: ${{ needs.constant.outputs.docker-image-name }}

#      - id: build-and-push-image
#        name: build and push image
#        uses: ./.github/workflows/composite/build-and-push-image
#        with:
#          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
#          aws-region: ${{ needs.constant.outputs.aws-region }}
#          aws-ecr-registry: ${{ secrets.AWS_ECR_REGISTRY }}
#          aws-ecr-repository: ${{ needs.constant.outputs.aws-ecr-repository }}

  deploy:
    runs-on: ubuntu-latest
    needs: [ constant, build-and-push-image ]
    steps:
      - id: checkout
        name: checkout
        uses: actions/checkout@v3.5.0
      - id: kick-deploy
        name: kick deploy
        run: |
          TOKEN=${{ secrets.DEPLOY_TOKEN }}
          curl \
            -X POST \
            -H "Authorization: token $TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/ningenMe/chiyuki-k8s-config/actions/workflows/single-deploy.yaml/dispatches \
            -d '{"ref":"main", "inputs":{"application-name": "akari-front"}}'

#  application-meta-push:
#    needs: deploy
#    runs-on: ubuntu-latest
#    env:
#      NET_API_USERNAME: ${{ secrets.NET_API_USERNAME }}
#      NET_API_PASSWORD: ${{ secrets.NET_API_PASSWORD }}
#
#    steps:
#      - uses: actions/checkout@v2
#      - name: application-meta push
#        run: |
#          token=`curl -X POST -d email=${{ env.NET_API_USERNAME }} -d password=${{ env.NET_API_PASSWORD }} https://api.ningenme.net/v1/login -i | grep MeCookie | awk -F '=|;' '{print $2}'`
#          curl -X POST -b "MeCookie=${token}" -H "Content-Type: application/json" https://api.ningenme.net/v1/application-metas/net-front
